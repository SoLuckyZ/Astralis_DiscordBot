import discord
from discord import app_commands
from discord.ext import commands
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO
import json
import os

from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive

from myserver import server_on

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Drive API
gauth = GoogleAuth()
gauth.LocalWebserverAuth()
drive = GoogleDrive(gauth)

DATA_FILE = "student_data.json"
DRIVE_FOLDER_ID = "1Zwv6cZux1z0I9vrSqRCNkc0N9NRjCftC"  # üìÇ ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Google Drive

class StudentCardBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="A!", intents=discord.Intents.all())
        self.load_data()

    async def on_ready(self):
        await self.tree.sync()
        print(f"‡∏ö‡∏≠‡∏ó {self.user} ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!")

    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Drive"""
        file_list = drive.ListFile({'q': f"'{DRIVE_FOLDER_ID}' in parents and title = '{DATA_FILE}'"}).GetList()
        if file_list:
            file_id = file_list[0]['id']
            file = drive.CreateFile({'id': file_id})
            file.GetContentFile(DATA_FILE)
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                self.student_data = json.load(f)
        else:
            self.student_data = {}

    def save_data(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive"""
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(self.student_data, f, ensure_ascii=False, indent=4)

        file_list = drive.ListFile({'q': f"'{DRIVE_FOLDER_ID}' in parents and title = '{DATA_FILE}'"}).GetList()
        if file_list:
            file = drive.CreateFile({'id': file_list[0]['id']})
        else:
            file = drive.CreateFile({'title': DATA_FILE, 'parents': [{'id': DRIVE_FOLDER_ID}]})

        file.SetContentFile(DATA_FILE)
        file.Upload()

bot = StudentCardBot()

# ‚úÖ Modal ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
class StudentCardModal(discord.ui.Modal, title="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"):
    house = discord.ui.TextInput(label="‡∏ö‡πâ‡∏≤‡∏ô", required=True)
    class_name = discord.ui.TextInput(label="‡∏ä‡∏±‡πâ‡∏ô", required=True)
    DOB = discord.ui.TextInput(label="‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", required=True)
    name = discord.ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠", required=True)
    partner = discord.ui.TextInput(label="‡∏Ñ‡∏π‡πà‡∏´‡∏π", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        bot.student_data[str(interaction.user.id)] = {
            "house": self.house.value,
            "class_name": self.class_name.value,
            "DOB": self.DOB.value,
            "name": self.name.value,
            "partner": self.partner.value,
            "profile_image_url": None,
            "waiting_for_image": True
        }
        bot.save_data()

        await interaction.followup.send("‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)

@bot.tree.command(name="studentcard", description="‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
async def studentcard(interaction: discord.Interaction):
    await interaction.response.send_modal(StudentCardModal())

@bot.tree.command(name="viewcard", description="‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô")
@app_commands.describe(user="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ = ‡∏î‡∏π‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)")
async def viewcard(interaction: discord.Interaction, user: discord.Member = None):
    target_user = user or interaction.user
    user_id = str(target_user.id)

    if user_id not in bot.student_data or not bot.student_data[user_id].get("profile_image_url"):
        await interaction.response.send_message(f"{target_user.mention} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", ephemeral=False)
        return

    data = bot.student_data[user_id]
    card_path = f"{user_id}_card.png"
    create_student_card(card_path, **data)

    await interaction.response.defer()

    file = discord.File(card_path)
    await interaction.followup.send(file=file)

# ‚úÖ ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Google Drive
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)
    if user_id not in bot.student_data or not bot.student_data[user_id].get("waiting_for_image", False):
        return

    if message.attachments:
        image_url = message.attachments[0].url

        # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
        img_data = requests.get(image_url).content
        img_path = f"{user_id}_profile.png"
        with open(img_path, "wb") as img_file:
            img_file.write(img_data)

        file = drive.CreateFile({'title': img_path, 'parents': [{'id': DRIVE_FOLDER_ID}]})
        file.SetContentFile(img_path)
        file.Upload()
        file_url = f"https://drive.google.com/uc?id={file['id']}"

        bot.student_data[user_id]["profile_image_url"] = file_url
        bot.student_data[user_id]["waiting_for_image"] = False
        bot.save_data()

        await message.reply("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡πÉ‡∏ä‡πâ `/viewcard` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

def create_student_card(card_path, house, class_name, DOB, name, partner, profile_image_url):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"""
    if os.path.exists(card_path):
        os.remove(card_path)

    response = requests.get(profile_image_url)
    response.raise_for_status()
    img = Image.open(BytesIO(response.content))

    background = Image.open("student_card.png")
    width, height = 1934, 1015
    card = background.resize((width, height))
    draw = ImageDraw.Draw(card)
    font = ImageFont.truetype("K2D-Regular.ttf", size=45)

    draw.text((639, 280), house, font=font, fill="black")
    draw.text((857, 375), class_name, font=font, fill="black")
    draw.text((858, 480), DOB, font=font, fill="black")
    draw.text((876, 581), name, font=font, fill="black")
    draw.text((909, 680), partner, font=font, fill="black")

    img = img.resize((490, 540))
    card.paste(img, (158, 362), img.convert("RGBA").getchannel("A"))

    card.save(card_path)

server_on()

bot.run(os.getenv('TOKEN'))